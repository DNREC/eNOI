'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace wsCROMTOM
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="wsCROMTOMSoap", [Namespace]:="CROMTOMService")>  _
    Partial Public Class wsCROMTOM
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private UploadDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUpdateProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileSizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFileHashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthenticateTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReturnUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeStatus_RepudiateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeStatus_RejectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeStatus_ExpireOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReturnUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReturnUserInfoByUserIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminGroupEmailByReportIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminDeptDetailsByReportIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.NoticeOfIntent.My.MySettings.Default.NoticeOfIntent_wsCROMTOM_wsCROMTOM
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event UploadDocumentCompleted As UploadDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFileCompleted As SaveFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitDocumentCompleted As SubmitDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUpdateProjectCompleted As AddUpdateProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileSizeCompleted As GetFileSizeCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFileHashCompleted As CheckFileHashCompletedEventHandler
        
        '''<remarks/>
        Public Event PingCompleted As PingCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthenticateTokenCompleted As AuthenticateTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event ReturnUserCompleted As ReturnUserCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentStatusCompleted As DocumentStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeStatus_RepudiateCompleted As ChangeStatus_RepudiateCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeStatus_RejectCompleted As ChangeStatus_RejectCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeStatus_ExpireCompleted As ChangeStatus_ExpireCompletedEventHandler
        
        '''<remarks/>
        Public Event ReturnUserInfoCompleted As ReturnUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ReturnUserInfoByUserIDCompleted As ReturnUserInfoByUserIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminGroupEmailByReportIDCompleted As GetAdminGroupEmailByReportIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminDeptDetailsByReportIDCompleted As GetAdminDeptDetailsByReportIDCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/UploadDocument", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UploadDocument(ByVal FileName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal buffer() As Byte)
            Me.Invoke("UploadDocument", New Object() {FileName, buffer})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentAsync(ByVal FileName As String, ByVal buffer() As Byte)
            Me.UploadDocumentAsync(FileName, buffer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentAsync(ByVal FileName As String, ByVal buffer() As Byte, ByVal userState As Object)
            If (Me.UploadDocumentOperationCompleted Is Nothing) Then
                Me.UploadDocumentOperationCompleted = AddressOf Me.OnUploadDocumentOperationCompleted
            End If
            Me.InvokeAsync("UploadDocument", New Object() {FileName, buffer}, Me.UploadDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocumentCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/SaveFile", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFile(ByVal FileName As String, ByVal LocalFileHash As String, ByVal LoginToken As String, ByVal ReportID As Integer, ByVal PiID As Integer, ByVal IPAddressUsed As String, ByVal Comments As String, ByVal SequenceRef As String) As Object
            Dim results() As Object = Me.Invoke("SaveFile", New Object() {FileName, LocalFileHash, LoginToken, ReportID, PiID, IPAddressUsed, Comments, SequenceRef})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFileAsync(ByVal FileName As String, ByVal LocalFileHash As String, ByVal LoginToken As String, ByVal ReportID As Integer, ByVal PiID As Integer, ByVal IPAddressUsed As String, ByVal Comments As String, ByVal SequenceRef As String)
            Me.SaveFileAsync(FileName, LocalFileHash, LoginToken, ReportID, PiID, IPAddressUsed, Comments, SequenceRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFileAsync(ByVal FileName As String, ByVal LocalFileHash As String, ByVal LoginToken As String, ByVal ReportID As Integer, ByVal PiID As Integer, ByVal IPAddressUsed As String, ByVal Comments As String, ByVal SequenceRef As String, ByVal userState As Object)
            If (Me.SaveFileOperationCompleted Is Nothing) Then
                Me.SaveFileOperationCompleted = AddressOf Me.OnSaveFileOperationCompleted
            End If
            Me.InvokeAsync("SaveFile", New Object() {FileName, LocalFileHash, LoginToken, ReportID, PiID, IPAddressUsed, Comments, SequenceRef}, Me.SaveFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFileCompleted(Me, New SaveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/SubmitDocument", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitDocument(ByVal LoginToken As String, ByVal FileName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal buffer() As Byte, ByVal ReportID As Integer, ByVal PiID As Integer, ByVal ProjectName As String, ByVal ProjectDesc As String, ByVal IPAddressUsed As String, ByVal Comments As String, ByVal SequenceRef As String, ByVal NumberOfSignatures As Integer, ByVal AuthorizedSignatoryEmailAddresses As String) As String
            Dim results() As Object = Me.Invoke("SubmitDocument", New Object() {LoginToken, FileName, buffer, ReportID, PiID, ProjectName, ProjectDesc, IPAddressUsed, Comments, SequenceRef, NumberOfSignatures, AuthorizedSignatoryEmailAddresses})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitDocumentAsync(ByVal LoginToken As String, ByVal FileName As String, ByVal buffer() As Byte, ByVal ReportID As Integer, ByVal PiID As Integer, ByVal ProjectName As String, ByVal ProjectDesc As String, ByVal IPAddressUsed As String, ByVal Comments As String, ByVal SequenceRef As String, ByVal NumberOfSignatures As Integer, ByVal AuthorizedSignatoryEmailAddresses As String)
            Me.SubmitDocumentAsync(LoginToken, FileName, buffer, ReportID, PiID, ProjectName, ProjectDesc, IPAddressUsed, Comments, SequenceRef, NumberOfSignatures, AuthorizedSignatoryEmailAddresses, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitDocumentAsync(ByVal LoginToken As String, ByVal FileName As String, ByVal buffer() As Byte, ByVal ReportID As Integer, ByVal PiID As Integer, ByVal ProjectName As String, ByVal ProjectDesc As String, ByVal IPAddressUsed As String, ByVal Comments As String, ByVal SequenceRef As String, ByVal NumberOfSignatures As Integer, ByVal AuthorizedSignatoryEmailAddresses As String, ByVal userState As Object)
            If (Me.SubmitDocumentOperationCompleted Is Nothing) Then
                Me.SubmitDocumentOperationCompleted = AddressOf Me.OnSubmitDocumentOperationCompleted
            End If
            Me.InvokeAsync("SubmitDocument", New Object() {LoginToken, FileName, buffer, ReportID, PiID, ProjectName, ProjectDesc, IPAddressUsed, Comments, SequenceRef, NumberOfSignatures, AuthorizedSignatoryEmailAddresses}, Me.SubmitDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitDocumentCompleted(Me, New SubmitDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/AddUpdateProject", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUpdateProject(ByVal ProjectName As String, ByVal ProjectDesc As String, ByVal ReportID As Integer, ByVal IsActive As Boolean, ByVal ProjectID As Integer) As Integer
            Dim results() As Object = Me.Invoke("AddUpdateProject", New Object() {ProjectName, ProjectDesc, ReportID, IsActive, ProjectID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUpdateProjectAsync(ByVal ProjectName As String, ByVal ProjectDesc As String, ByVal ReportID As Integer, ByVal IsActive As Boolean, ByVal ProjectID As Integer)
            Me.AddUpdateProjectAsync(ProjectName, ProjectDesc, ReportID, IsActive, ProjectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUpdateProjectAsync(ByVal ProjectName As String, ByVal ProjectDesc As String, ByVal ReportID As Integer, ByVal IsActive As Boolean, ByVal ProjectID As Integer, ByVal userState As Object)
            If (Me.AddUpdateProjectOperationCompleted Is Nothing) Then
                Me.AddUpdateProjectOperationCompleted = AddressOf Me.OnAddUpdateProjectOperationCompleted
            End If
            Me.InvokeAsync("AddUpdateProject", New Object() {ProjectName, ProjectDesc, ReportID, IsActive, ProjectID}, Me.AddUpdateProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUpdateProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUpdateProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUpdateProjectCompleted(Me, New AddUpdateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/GetFileSize", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFileSize(ByVal FileName As String) As Long
            Dim results() As Object = Me.Invoke("GetFileSize", New Object() {FileName})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileSizeAsync(ByVal FileName As String)
            Me.GetFileSizeAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileSizeAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.GetFileSizeOperationCompleted Is Nothing) Then
                Me.GetFileSizeOperationCompleted = AddressOf Me.OnGetFileSizeOperationCompleted
            End If
            Me.InvokeAsync("GetFileSize", New Object() {FileName}, Me.GetFileSizeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileSizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileSizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileSizeCompleted(Me, New GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/CheckFileHash", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFileHash(ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("CheckFileHash", New Object() {FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFileHashAsync(ByVal FileName As String)
            Me.CheckFileHashAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFileHashAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.CheckFileHashOperationCompleted Is Nothing) Then
                Me.CheckFileHashOperationCompleted = AddressOf Me.OnCheckFileHashOperationCompleted
            End If
            Me.InvokeAsync("CheckFileHash", New Object() {FileName}, Me.CheckFileHashOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFileHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFileHashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFileHashCompleted(Me, New CheckFileHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/Ping", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Ping()
            Me.Invoke("Ping", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PingAsync()
            Me.PingAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PingAsync(ByVal userState As Object)
            If (Me.PingOperationCompleted Is Nothing) Then
                Me.PingOperationCompleted = AddressOf Me.OnPingOperationCompleted
            End If
            Me.InvokeAsync("Ping", New Object(-1) {}, Me.PingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PingCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/AuthenticateToken", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthenticateToken(ByVal LoginToken As String) As Integer
            Dim results() As Object = Me.Invoke("AuthenticateToken", New Object() {LoginToken})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthenticateTokenAsync(ByVal LoginToken As String)
            Me.AuthenticateTokenAsync(LoginToken, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthenticateTokenAsync(ByVal LoginToken As String, ByVal userState As Object)
            If (Me.AuthenticateTokenOperationCompleted Is Nothing) Then
                Me.AuthenticateTokenOperationCompleted = AddressOf Me.OnAuthenticateTokenOperationCompleted
            End If
            Me.InvokeAsync("AuthenticateToken", New Object() {LoginToken}, Me.AuthenticateTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthenticateTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthenticateTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthenticateTokenCompleted(Me, New AuthenticateTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/ReturnUser", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReturnUser(ByVal LoginToken As String, ByRef AuthUserName As String, ByRef AuthPiID As String) As Object
            Dim results() As Object = Me.Invoke("ReturnUser", New Object() {LoginToken, AuthUserName, AuthPiID})
            AuthUserName = CType(results(1),String)
            AuthPiID = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReturnUserAsync(ByVal LoginToken As String, ByVal AuthUserName As String, ByVal AuthPiID As String)
            Me.ReturnUserAsync(LoginToken, AuthUserName, AuthPiID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReturnUserAsync(ByVal LoginToken As String, ByVal AuthUserName As String, ByVal AuthPiID As String, ByVal userState As Object)
            If (Me.ReturnUserOperationCompleted Is Nothing) Then
                Me.ReturnUserOperationCompleted = AddressOf Me.OnReturnUserOperationCompleted
            End If
            Me.InvokeAsync("ReturnUser", New Object() {LoginToken, AuthUserName, AuthPiID}, Me.ReturnUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnReturnUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReturnUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReturnUserCompleted(Me, New ReturnUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/DocumentStatus", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentStatus(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String) As Object
            Dim results() As Object = Me.Invoke("DocumentStatus", New Object() {PiID, ReportTypeID, SequenceRef})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentStatusAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String)
            Me.DocumentStatusAsync(PiID, ReportTypeID, SequenceRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentStatusAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String, ByVal userState As Object)
            If (Me.DocumentStatusOperationCompleted Is Nothing) Then
                Me.DocumentStatusOperationCompleted = AddressOf Me.OnDocumentStatusOperationCompleted
            End If
            Me.InvokeAsync("DocumentStatus", New Object() {PiID, ReportTypeID, SequenceRef}, Me.DocumentStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentStatusCompleted(Me, New DocumentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/ChangeStatus_Repudiate", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeStatus_Repudiate(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String) As Object
            Dim results() As Object = Me.Invoke("ChangeStatus_Repudiate", New Object() {PiID, ReportTypeID, SequenceRef})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeStatus_RepudiateAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String)
            Me.ChangeStatus_RepudiateAsync(PiID, ReportTypeID, SequenceRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeStatus_RepudiateAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String, ByVal userState As Object)
            If (Me.ChangeStatus_RepudiateOperationCompleted Is Nothing) Then
                Me.ChangeStatus_RepudiateOperationCompleted = AddressOf Me.OnChangeStatus_RepudiateOperationCompleted
            End If
            Me.InvokeAsync("ChangeStatus_Repudiate", New Object() {PiID, ReportTypeID, SequenceRef}, Me.ChangeStatus_RepudiateOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeStatus_RepudiateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeStatus_RepudiateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeStatus_RepudiateCompleted(Me, New ChangeStatus_RepudiateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/ChangeStatus_Reject", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeStatus_Reject(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String) As Object
            Dim results() As Object = Me.Invoke("ChangeStatus_Reject", New Object() {PiID, ReportTypeID, SequenceRef})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeStatus_RejectAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String)
            Me.ChangeStatus_RejectAsync(PiID, ReportTypeID, SequenceRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeStatus_RejectAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String, ByVal userState As Object)
            If (Me.ChangeStatus_RejectOperationCompleted Is Nothing) Then
                Me.ChangeStatus_RejectOperationCompleted = AddressOf Me.OnChangeStatus_RejectOperationCompleted
            End If
            Me.InvokeAsync("ChangeStatus_Reject", New Object() {PiID, ReportTypeID, SequenceRef}, Me.ChangeStatus_RejectOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeStatus_RejectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeStatus_RejectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeStatus_RejectCompleted(Me, New ChangeStatus_RejectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/ChangeStatus_Expire", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeStatus_Expire(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String) As Object
            Dim results() As Object = Me.Invoke("ChangeStatus_Expire", New Object() {PiID, ReportTypeID, SequenceRef})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeStatus_ExpireAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String)
            Me.ChangeStatus_ExpireAsync(PiID, ReportTypeID, SequenceRef, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeStatus_ExpireAsync(ByVal PiID As Integer, ByVal ReportTypeID As Short, ByVal SequenceRef As String, ByVal userState As Object)
            If (Me.ChangeStatus_ExpireOperationCompleted Is Nothing) Then
                Me.ChangeStatus_ExpireOperationCompleted = AddressOf Me.OnChangeStatus_ExpireOperationCompleted
            End If
            Me.InvokeAsync("ChangeStatus_Expire", New Object() {PiID, ReportTypeID, SequenceRef}, Me.ChangeStatus_ExpireOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeStatus_ExpireOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeStatus_ExpireCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeStatus_ExpireCompleted(Me, New ChangeStatus_ExpireCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/ReturnUserInfo", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReturnUserInfo(ByVal LoginToken As String, ByRef AuthUserName As String, ByRef FullName As String, ByRef EMail As String, ByRef AuthPiID As String) As Object
            Dim results() As Object = Me.Invoke("ReturnUserInfo", New Object() {LoginToken, AuthUserName, FullName, EMail, AuthPiID})
            AuthUserName = CType(results(1),String)
            FullName = CType(results(2),String)
            EMail = CType(results(3),String)
            AuthPiID = CType(results(4),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReturnUserInfoAsync(ByVal LoginToken As String, ByVal AuthUserName As String, ByVal FullName As String, ByVal EMail As String, ByVal AuthPiID As String)
            Me.ReturnUserInfoAsync(LoginToken, AuthUserName, FullName, EMail, AuthPiID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReturnUserInfoAsync(ByVal LoginToken As String, ByVal AuthUserName As String, ByVal FullName As String, ByVal EMail As String, ByVal AuthPiID As String, ByVal userState As Object)
            If (Me.ReturnUserInfoOperationCompleted Is Nothing) Then
                Me.ReturnUserInfoOperationCompleted = AddressOf Me.OnReturnUserInfoOperationCompleted
            End If
            Me.InvokeAsync("ReturnUserInfo", New Object() {LoginToken, AuthUserName, FullName, EMail, AuthPiID}, Me.ReturnUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReturnUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReturnUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReturnUserInfoCompleted(Me, New ReturnUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/ReturnUserInfoByUserID", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReturnUserInfoByUserID(ByVal userid As String, ByRef FullName As String, ByRef EMail As String, ByRef CompanyName As String) As Object
            Dim results() As Object = Me.Invoke("ReturnUserInfoByUserID", New Object() {userid, FullName, EMail, CompanyName})
            FullName = CType(results(1),String)
            EMail = CType(results(2),String)
            CompanyName = CType(results(3),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReturnUserInfoByUserIDAsync(ByVal userid As String, ByVal FullName As String, ByVal EMail As String, ByVal CompanyName As String)
            Me.ReturnUserInfoByUserIDAsync(userid, FullName, EMail, CompanyName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReturnUserInfoByUserIDAsync(ByVal userid As String, ByVal FullName As String, ByVal EMail As String, ByVal CompanyName As String, ByVal userState As Object)
            If (Me.ReturnUserInfoByUserIDOperationCompleted Is Nothing) Then
                Me.ReturnUserInfoByUserIDOperationCompleted = AddressOf Me.OnReturnUserInfoByUserIDOperationCompleted
            End If
            Me.InvokeAsync("ReturnUserInfoByUserID", New Object() {userid, FullName, EMail, CompanyName}, Me.ReturnUserInfoByUserIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnReturnUserInfoByUserIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReturnUserInfoByUserIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReturnUserInfoByUserIDCompleted(Me, New ReturnUserInfoByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/GetAdminGroupEmailByReportID", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdminGroupEmailByReportID(ByVal reportid As Integer) As String
            Dim results() As Object = Me.Invoke("GetAdminGroupEmailByReportID", New Object() {reportid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdminGroupEmailByReportIDAsync(ByVal reportid As Integer)
            Me.GetAdminGroupEmailByReportIDAsync(reportid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminGroupEmailByReportIDAsync(ByVal reportid As Integer, ByVal userState As Object)
            If (Me.GetAdminGroupEmailByReportIDOperationCompleted Is Nothing) Then
                Me.GetAdminGroupEmailByReportIDOperationCompleted = AddressOf Me.OnGetAdminGroupEmailByReportIDOperationCompleted
            End If
            Me.InvokeAsync("GetAdminGroupEmailByReportID", New Object() {reportid}, Me.GetAdminGroupEmailByReportIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminGroupEmailByReportIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminGroupEmailByReportIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminGroupEmailByReportIDCompleted(Me, New GetAdminGroupEmailByReportIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("CROMTOMService/GetAdminDeptDetailsByReportID", RequestNamespace:="CROMTOMService", ResponseNamespace:="CROMTOMService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetAdminDeptDetailsByReportID(ByVal reportid As Integer, ByRef deptname As String, ByRef email As String, ByRef phone As String)
            Dim results() As Object = Me.Invoke("GetAdminDeptDetailsByReportID", New Object() {reportid, deptname, email, phone})
            deptname = CType(results(0),String)
            email = CType(results(1),String)
            phone = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminDeptDetailsByReportIDAsync(ByVal reportid As Integer, ByVal deptname As String, ByVal email As String, ByVal phone As String)
            Me.GetAdminDeptDetailsByReportIDAsync(reportid, deptname, email, phone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminDeptDetailsByReportIDAsync(ByVal reportid As Integer, ByVal deptname As String, ByVal email As String, ByVal phone As String, ByVal userState As Object)
            If (Me.GetAdminDeptDetailsByReportIDOperationCompleted Is Nothing) Then
                Me.GetAdminDeptDetailsByReportIDOperationCompleted = AddressOf Me.OnGetAdminDeptDetailsByReportIDOperationCompleted
            End If
            Me.InvokeAsync("GetAdminDeptDetailsByReportID", New Object() {reportid, deptname, email, phone}, Me.GetAdminDeptDetailsByReportIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminDeptDetailsByReportIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminDeptDetailsByReportIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminDeptDetailsByReportIDCompleted(Me, New GetAdminDeptDetailsByReportIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SaveFileCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub AddUpdateProjectCompletedEventHandler(ByVal sender As Object, ByVal e As AddUpdateProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUpdateProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetFileSizeCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileSizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileSizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CheckFileHashCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFileHashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFileHashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub PingCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub AuthenticateTokenCompletedEventHandler(ByVal sender As Object, ByVal e As AuthenticateTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthenticateTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ReturnUserCompletedEventHandler(ByVal sender As Object, ByVal e As ReturnUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReturnUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AuthUserName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AuthPiID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentStatusCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ChangeStatus_RepudiateCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeStatus_RepudiateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeStatus_RepudiateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ChangeStatus_RejectCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeStatus_RejectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeStatus_RejectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ChangeStatus_ExpireCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeStatus_ExpireCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeStatus_ExpireCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ReturnUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ReturnUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReturnUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AuthUserName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FullName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property EMail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AuthPiID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ReturnUserInfoByUserIDCompletedEventHandler(ByVal sender As Object, ByVal e As ReturnUserInfoByUserIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReturnUserInfoByUserIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FullName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property EMail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CompanyName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetAdminGroupEmailByReportIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminGroupEmailByReportIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminGroupEmailByReportIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetAdminDeptDetailsByReportIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminDeptDetailsByReportIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminDeptDetailsByReportIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property deptname() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property phone() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
